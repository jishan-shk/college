pip install opencv-python matplotlib

import cv2
import numpy as np
import matplotlib.pyplot as plt

def corner_detection(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    corners = cv2.goodFeaturesToTrack(gray, 100, 0.01, 10)
    corners = np.intp(corners)
    for corner in corners:
        x, y = corner.ravel()
        cv2.circle(image, (x, y), 3, (255, 0, 0), -1)
    return image

def blob_detection(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    detector = cv2.SimpleBlobDetector_create()
    keypoints = detector.detect(gray)
    im_with_keypoints = cv2.drawKeypoints(image, keypoints, np.array([]), (0, 0, 255), cv2.DRAW_MATCHES_FLAGS_DRAW_RICH_KEYPOINTS)
    return im_with_keypoints

def hog_features(image):
    hog = cv2.HOGDescriptor()
    features = hog.compute(image)
    return features

def haar_features(image):
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)
    face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
    faces = face_cascade.detectMultiScale(gray, 1.3, 5)
    for (x, y, w, h) in faces:
        cv2.rectangle(image, (x, y), (x + w, y + h), (255, 0, 0), 2)
    return image

if __name__ == "__main__":
    image_path = 'th.jpg'
    image = cv2.imread(image_path)

    corner_image = corner_detection(image.copy())
    plt.imshow(cv2.cvtColor(corner_image, cv2.COLOR_BGR2RGB))
    plt.title("Corner Detection")
    plt.axis('off')
    plt.show()

    blob_image = blob_detection(image.copy())
    plt.imshow(cv2.cvtColor(blob_image, cv2.COLOR_BGR2RGB))
    plt.title("Blob Detection")
    plt.axis('off')
    plt.show()

    hog_features_result = hog_features(image)
    print("HOG Features:", hog_features_result)

    haar_image = haar_features(image.copy())
    plt.imshow(cv2.cvtColor(haar_image, cv2.COLOR_BGR2RGB))
    plt.title("Haar Features")
    plt.axis('off')
    plt.show()
