pip install numpy scipy matplotlib

Generate Wav File : 

import numpy as np
from scipy.io.wavfile import write

# Sampling frequency (Hz)
fs = 44100
# Duration of the speech signal (seconds)
duration = 3.0
# Generate a time array
t = np.linspace(0, duration, int(fs * duration), endpoint=False)
# Generate a synthetic speech signal (sine wave)
frequency = 440  # Hz (frequency of A4)
synthetic_signal = 0.5 * np.sin(2 * np.pi * frequency * t)
# Scale the signal to 16-bit integers
scaled_signal = np.int16(synthetic_signal * 32767)
# Write the synthetic speech signal to a WAV file
write("synthetic_speech.wav", fs, scaled_signal)

Sampling and DFT: 

import numpy as np
import matplotlib.pyplot as plt
from scipy.io import wavfile


def upsample(signal, factor):
    return np.repeat(signal, factor)


def downsample(signal, factor):
    return signal[::factor]


def compute_dft(signal):
    return np.fft.fft(signal)


def plot_signal(signal, title):
    plt.plot(signal)
    plt.title(title)
    plt.xlabel("Sample")
    plt.ylabel("Amplitude")
    plt.grid(True)
    plt.show()


def plot_spectrum(fft_result, title):
    plt.plot(np.abs(fft_result))
    plt.title(title)
    plt.xlabel("Frequency (Hz)")
    plt.ylabel("Magnitude")
    plt.grid(True)
    plt.show()


# Load an example speech signal
fs, speech_signal = wavfile.read("synthetic_speech.wav")

# Plot original speech signal
plot_signal(speech_signal, "Original Speech Signal")

# Upsample the speech signal by a factor of 2
upsampled_signal = upsample(speech_signal, 2)
plot_signal(upsampled_signal, "Upsampled Speech Signal")

# Downsample the speech signal by a factor of 2
downsampled_signal = downsample(speech_signal, 2)
plot_signal(downsampled_signal, "Downsampled Speech Signal")

# Compute the Discrete Fourier Transform (DFT) of the original speech signal
dft_result = compute_dft(speech_signal)
plot_spectrum(dft_result, "DFT of Original Speech Signal")
