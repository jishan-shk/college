pip install opencv-python
pip install matplotlib

import cv2
from matplotlib import pyplot as plt


def apply_sobel(image):
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Sobel operator in x and y directions
    sobel_x = cv2.Sobel(gray, cv2.CV_64F, 1, 0, ksize=5)
    sobel_y = cv2.Sobel(gray, cv2.CV_64F, 0, 1, ksize=5)

    # Calculate the gradient magnitude
    gradient_magnitude = cv2.magnitude(sobel_x, sobel_y)

    # Normalize the gradient magnitude to range 0-255
    gradient_magnitude = cv2.normalize(
        gradient_magnitude, None, 0, 255, cv2.NORM_MINMAX, cv2.CV_8U
    )

    return gradient_magnitude


def apply_canny(image, min_threshold=100, max_threshold=200):
    # Convert the image to grayscale
    gray = cv2.cvtColor(image, cv2.COLOR_BGR2GRAY)

    # Apply Canny edge detection
    edges = cv2.Canny(gray, min_threshold, max_threshold)

    return edges


# Load the image
image = cv2.imread("th.jpg")
# Apply Sobel edge detection
sobel_edges = apply_sobel(image)
# Apply Canny edge detection
canny_edges = apply_canny(image)

# Plot the results
plt.figure(figsize=(12, 6))
plt.subplot(1, 3, 1)
plt.imshow(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
plt.title("Original Image")
plt.axis("off")

plt.subplot(1, 3, 2)
plt.imshow(sobel_edges, cmap="gray")
plt.title("Sobel Edges")
plt.axis("off")

plt.subplot(1, 3, 3)
plt.imshow(canny_edges, cmap="gray")
plt.title("Canny Edges")
plt.axis("off")
plt.show()
